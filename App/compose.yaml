services:
  database:
    container_name: postgresql_database
    image: postgres:17.0
    restart: unless-stopped
    env_file:
      - project.env
    ports: # TODO: comment out later
      - 5432:5432 # Only for development/debugging
    environment:
      - TZ=Europe/Helsinki  # Set the timezone
    #volumes:
    #  - ./data-preparation/data:/data #let's keep this, so we can do manual inserts also

  database-migrations:
    image: flyway/flyway:10
    env_file:
      - project.env
    depends_on:
      database:
        condition: service_started
      #data-preparation:
      #  condition: service_healthy
    volumes:
      #- ./data-preparation/data:/data
      - ./database-migrations:/flyway/sql
    command: -connectRetries=60 -baselineOnMigrate=true migrate
      
  client:
    build: client
    restart: unless-stopped
    volumes:
      - ./client:/app
    ports:
      - 5173:5173
    depends_on:
      - server

  e2e-tests:
    entrypoint: "/bin/true"
    build: e2e-tests
    network_mode: host
    depends_on:
      - client
    volumes:
      - ./e2e-tests/tests:/app.tests

  server:
    build:
      context: ./python-server  # Updated to point to the python-server directory
    restart: unless-stopped
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    volumes:
      - ./python-server:/app
    ports:
      - 8000:8000
    env_file:
      - project.env
    depends_on:
      - database
    environment:
      - TZ=Europe/Helsinki  # Set the timezone

  chat-engine:
    container_name: chat-engine
    build:
      context: .
      dockerfile: chat-engine/Dockerfile
    volumes:
      - type: bind
        source: ./chat-engine/.ollama
        target: /root/.ollama
    ports:
      - 7860:7860
    restart: always
    profiles:
      - chat-engine

  data-preparation:
    build:
      context: ./data-preparation/scripts  # Here be Dockerfile
    volumes:
      - ./data-preparation/data:/data
      - ./data-preparation/scripts:/scripts # remove for production
    working_dir: /scripts # this is already done in the Dockerfile (remove for production)
    env_file:
      - ./project.env
    entrypoint: >
      bash -c "
      ./populate_porssisahko.sh
      #tail -f /dev/null # for debugging -- keeps the container running after the script finishes
      "
    profiles:
      - data-preparation

    #If we end-up doing the data population in migrations, it'll depend on loaded data
    # from the data-preparation service
    #healthcheck: # This is to ensure data is available before running migrations
    #  test: ["CMD", "bash", "-c", "if [ -f /data/porssisahko.csv ]; then exit 0; else exit 1; fi"]
    #  interval: 10s
    #  timeout: 5s
    #  retries: 3
    #  start_period: 30s
