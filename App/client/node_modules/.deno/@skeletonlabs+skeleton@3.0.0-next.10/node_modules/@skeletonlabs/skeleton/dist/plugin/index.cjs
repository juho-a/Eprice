"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/plugin/generated/generated-classes.cjs
var require_generated_classes = __commonJS({
  "src/plugin/generated/generated-classes.cjs"(exports2, module2) {
    "use strict";
    module2.exports = { components: { ".h1,\n.h2,\n.h3,\n.h4,\n.h5,\n.h6": { "@apply block": true, "@apply heading-font-color dark:heading-font-color-dark": true, "@apply heading-font-family": true, "@apply heading-font-weight": true, "@apply heading-font-style": true, "@apply heading-letter-spacing": true }, ".h1": { "@apply type-scale-8 md:type-scale-9": true }, ".h2": { "@apply type-scale-7 md:type-scale-8": true }, ".h3": { "@apply type-scale-6 md:type-scale-7": true }, ".h4": { "@apply type-scale-5 md:type-scale-6": true }, ".h5": { "@apply type-scale-4 md:type-scale-5": true }, ".h6": { "@apply type-scale-3 md:type-scale-4": true }, ".anchor": { "@apply anchor-font-color dark:anchor-font-color-dark": true, "@apply anchor-font-family": true, "@apply anchor-font-size": true, "@apply anchor-font-style": true, "@apply anchor-font-weight": true, "@apply anchor-line-height": true, "@apply anchor-letter-spacing": true, "@apply anchor-text-decoration": true, "@apply hover:anchor-text-decoration-hover": true, "@apply active:anchor-text-decoration-active": true, "@apply focus:anchor-text-decoration-focus": true }, ".blockquote": { "@apply border-l-surface-300 dark:border-l-surface-700 border-l-[1px] pl-4 italic": true }, ".kbd": { "@apply text-surface-contrast-500 whitespace-nowrap font-mono text-sm": true, "@apply bg-surface-500 overflow-x-auto rounded px-1 py-0.5": true }, ".pre": { "@apply bg-surface-950 dark:bg-surface-900 rounded-container overflow-x-auto p-4": true, "@apply type-scale-1 whitespace-pre-wrap text-white": true }, ":not(pre, .ec-line) > .code": { "@apply preset-tonal-primary": true, "@apply whitespace-nowrap font-mono text-xs": true, "@apply overflow-x-auto rounded px-1.5 py-0.5": true }, ".ins,\n.del": { "@apply relative block p-0.5 pl-5": true, "textDecoration": "none" }, ".ins::before,\n.del::before": { "@apply absolute left-1 font-mono": true }, ".ins::before": { "content": "'+'" }, ".del::before": { "content": "'\u2212'" }, ".ins": { "@apply bg-success-500 text-success-contrast-500 font-mono": true }, ".del": { "@apply bg-error-500 text-error-contrast-500 font-mono": true }, ".badge": { "@apply inline-flex items-center justify-center space-x-2 whitespace-nowrap": true, "@apply type-scale-1 font-medium": true, "@apply px-3 py-0.5": true, "@apply rounded": true }, ".badge-icon": { "@apply inline-flex size-6 items-center justify-center rounded-full": true, "@apply type-scale-1 font-medium": true }, ".btn,\n.btn-icon": { "@apply rounded font-medium no-underline": true, "@apply inline-flex items-center justify-center gap-4 whitespace-nowrap": true, "@apply transition-all": true, "@apply hover:brightness-105 dark:hover:brightness-75": true }, ".btn": { "@apply btn-md": true }, ".btn-icon": { "@apply btn-icon-md": true }, ".btn-sm": { "@apply h-6 px-4 py-2 text-xs": true }, ".btn-md": { "@apply h-9 px-4 py-2 text-inherit": true }, ".btn-lg": { "@apply h-12 px-4 py-2 text-xl": true }, ".btn-icon-sm": { "@apply size-6 p-2 text-xs": true }, ".btn-icon-md": { "@apply size-9 p-2 text-inherit": true }, ".btn-icon-lg": { "@apply size-12 p-2 text-xl": true }, ".btn-group": { "@apply rounded-container flex gap-2 overflow-hidden p-2": true }, ".card": { "@apply rounded-container": true }, "a.card": { "@apply transition-all hover:brightness-[0.98] dark:hover:brightness-110": true }, ".card-hover": { "@apply transition-all duration-100 hover:scale-[1.025] hover:shadow-xl": true }, ".chip": { "@apply inline-flex items-center justify-center space-x-2 whitespace-nowrap": true, "@apply type-scale-1 font-medium": true, "@apply px-3 py-0.5": true, "@apply rounded": true, "@apply transition-all hover:brightness-90 dark:hover:brightness-110": true }, ".chip-icon": { "@apply flex size-6 items-center justify-center rounded-full": true, "@apply type-scale-1 font-medium": true }, ".chip-input": { "all": "unset", "@apply chip": true }, ".fieldset,\n.legend,\n.label,\n.input,\n.textarea,\n.select": { "@apply block": true }, ".input::-webkit-calendar-picker-indicator": { "@apply dark:invert": true }, ".label": { "@apply w-full space-y-1": true }, ".label-text": { "@apply type-scale-1 font-medium": true }, ".field-outter": { "@apply overflow-hidden rounded": true, "@apply ring-surface-200-800 focus-within:ring-primary-500 ring": true, "@apply hover:brightness-90 dark:hover:brightness-110": true, "@apply disabled:pointer-events-none disabled:opacity-50": true }, ".field-inner": { "@apply w-full bg-transparent": true }, ".input,\n.textarea,\n.select": { "@apply field-outter field-inner": true, "@apply border-none": true, "@apply transition duration-200": true }, ".input-ghost": { "@apply p-0 bg-transparent border-transparent focus:border-transparent focus:ring-0": true }, ".select": { "@apply space-y-1": true }, ".select optgroup": { "@apply space-y-1 font-bold": true }, ".select optgroup option": { "@apply ml-0 pl-0": true }, ".select optgroup option:first-of-type": { "@apply mt-2": true }, ".select optgroup option:last-child": { "@apply !mb-2": true }, ".select option,\n.input-group option": { "@apply cursor-pointer rounded p-2": true }, ".select:not([size]):not([multiple]) optgroup,\n.select:not([size]):not([multiple]) option,\n.input-group optgroup,\n.input-group option": { "@apply bg-surface-50 dark:bg-surface-950": true, "@apply text-surface-950 dark:text-surface-50": true }, ".select option:checked": { "background": "rgb(var(--color-primary-500)) linear-gradient(0deg, rgb(var(--color-primary-500)) 0%, rgb(var(--color-primary-500)) 100%)" }, ".checkbox,\n.radio": { "@apply bg-surface-300-700 w-4 cursor-pointer rounded-sm": true, "@apply ring-surface-200-800 focus-within:ring-primary-500 ring": true, "@apply hover:brightness-105 focus:brightness-105": true }, ".checkbox:checked,\n.checkbox:indeterminate,\n.radio:checked": { "@apply bg-primary-500 hover:bg-primary-500 focus:bg-primary-500 focus:ring-0": true }, ".radio": { "@apply rounded-full": true }, ".input[type='file']": { "@apply p-2": true }, ".input[type='file']::file-selector-button": { "@apply btn preset-filled mr-2 border-none": true }, ".input[type='range']": { "@apply accent-surface-900 dark:accent-surface-50 w-full !ring-0": true }, ".input[type='color']": { "@apply size-10 cursor-pointer overflow-hidden rounded border-none": true, "WebkitAppearance": "none" }, ".input[type='color']::-webkit-color-swatch-wrapper": { "@apply p-0": true }, ".input[type='color']::-webkit-color-swatch": { "@apply border-none hover:brightness-110": true }, ".input[type='color']::-moz-color-swatch": { "@apply border-none": true }, ".input[type='search']::-webkit-search-cancel-button": { "WebkitAppearance": "none", "background": `url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'%3E%3Cpath d='M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm121.6 313.1c4.7 4.7 4.7 12.3 0 17L338 377.6c-4.7 4.7-12.3 4.7-17 0L256 312l-65.1 65.6c-4.7 4.7-12.3 4.7-17 0L134.4 338c-4.7-4.7-4.7-12.3 0-17l65.6-65-65.6-65.1c-4.7-4.7-4.7-12.3 0-17l39.6-39.6c4.7-4.7 12.3-4.7 17 0l65 65.7 65.1-65.6c4.7-4.7 12.3-4.7 17 0l39.6 39.6c4.7 4.7 4.7 12.3 0 17L312 256l65.6 65.1z'/%3E%3C/svg%3E")
		no-repeat 50% 50%`, "@apply pointer-events-none h-4 w-4 rounded-full bg-contain opacity-0": true, "@apply dark:invert": true }, ".input[type='search']:focus::-webkit-search-cancel-button": { "@apply pointer-events-auto opacity-100": true }, ".progress": { "webkitAppearance": "none", "MozAppearance": "none", "appearance": "none", "@apply h-2 w-full overflow-hidden rounded": true, "@apply bg-surface-200-800": true }, ".progress::-webkit-progress-bar": { "@apply bg-surface-200-800": true }, ".progress::-webkit-progress-value": { "@apply bg-surface-950-50": true }, ".progress::-moz-progress-bar": { "@apply bg-surface-950-50": true }, ".progress:indeterminate::-moz-progress-bar": { "width": "0" }, ".input-group": { "@apply grid items-stretch overflow-hidden": true, "@apply field-outter": true, "@apply transition-[all] duration-100": true }, ".input-group input,\n.input-group select,\n.input-group button": { "@apply border-0 !bg-transparent text-current !outline-0 !ring-0": true, "@apply field-inner": true }, ".input-group-cell": { "@apply flex min-w-10 items-center justify-center px-2": true }, ".input:disabled,\n.textarea:disabled,\n.select:disabled,\n.input-group > input:disabled,\n.input-group > textarea:disabled,\n.input-group > select:disabled": { "@apply !cursor-not-allowed !opacity-50 hover:!brightness-100": true }, ".input[readonly],\n.textarea[readonly],\n.select[readonly]": { "@apply !cursor-not-allowed !border-transparent hover:!brightness-100": true }, ".input::placeholder,\n.textarea::placeholder,\n.input-group input::placeholder,\n.input-group textarea::placeholder": { "@apply base-font-color dark:base-font-color-dark": true, "@apply text-base opacity-60 dark:opacity-50": true }, ".hr": { "@apply border-surface-200-800 block w-full border-t-[1px]": true }, ".vr": { "@apply border-surface-200-800 inline-block h-full border-l-[1px]": true }, ".placeholder": { "@apply bg-surface-500/20 min-h-4 rounded": true }, ".placeholder-circle": { "@apply bg-surface-500/20 aspect-square size-5 rounded-full": true }, ".table-wrap": { "@apply w-full overflow-auto": true }, ".table": { "@apply type-scale-2 relative w-full": true }, ".table thead": { "@apply text-surface-600-400": true, "@apply border-surface-200-800 border-b": true }, ".table th": { "@apply text-left font-normal": true }, ".table tbody": { "@apply divide-surface-200-800 divide-y": true }, ".table tfoot": { "@apply border-surface-200-800 border-t": true, "@apply bg-surface-100-900": true }, ".table th,\n.table td": { "@apply p-2": true }, ".table caption": { "@apply text-surface-600-400": true, "@apply type-scale-1": true } }, base: { "body": { "@apply bg-body-color dark:bg-body-color-dark": true, "@apply base-font-color dark:base-font-color-dark": true, "@apply base-font-family": true, "@apply base-font-size": true, "@apply base-font-style": true, "@apply base-font-weight": true, "@apply base-line-height": true, "@apply base-letter-spacing": true }, "::selection": { "@apply bg-primary-500/30": true }, "html": { "WebkitTapHighlightColor": "rgba(128, 128, 128, 0.5)" }, ":root": { "scrollbarColor": "rgba(128, 128, 128, 0.5) rgba(0, 0, 0, 0.1)", "scrollbarWidth": "thin" }, ".focused": { "@apply ring-[2px] ring-surface-950 dark:ring-surface-50 ring-inset": true }, ".disabled,\nbutton:disabled": { "@apply pointer-events-none opacity-50": true } } };
  }
});

// src/plugin/index.ts
var plugin_exports = {};
__export(plugin_exports, {
  contentPath: () => contentPath,
  skeleton: () => skeleton
});
module.exports = __toCommonJS(plugin_exports);
var import_node_path = __toESM(require("path"), 1);
var import_node_url = require("url");
var import_node_module = require("module");
var import_plugin2 = __toESM(require("tailwindcss/plugin.js"), 1);
var import_postcss_js = __toESM(require("postcss-js"), 1);

// src/plugin/core.ts
var import_plugin = __toESM(require("tailwindcss/plugin.js"), 1);

// src/plugin/settings.ts
var settings = {
  colorNames: ["primary", "secondary", "tertiary", "success", "warning", "error", "surface"],
  colorShades: [50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 950],
  colorPairings: [
    { light: 50, dark: 950 },
    { light: 100, dark: 900 },
    { light: 200, dark: 800 },
    { light: 300, dark: 700 },
    { light: 400, dark: 600 },
    // Center uses shade 500
    { light: 950, dark: 50 },
    { light: 900, dark: 100 },
    { light: 800, dark: 200 },
    { light: 700, dark: 300 },
    { light: 600, dark: 400 }
  ]
};
var settings_default = settings;

// src/plugin/utilities/color-pairings.ts
function directional(key) {
  return [key, `${key}-t`, `${key}-b`, `${key}-l`, `${key}-r`];
}
var utilColorPairings = () => {
  const properties = [
    "bg",
    "text",
    ...directional("border"),
    "ring",
    "accent",
    "shadow",
    "decoration",
    "divide",
    "outline",
    "caret",
    "stroke",
    "fill"
  ];
  const classes = {};
  settings.colorNames.forEach((n) => {
    properties.forEach((property) => {
      settings.colorPairings.forEach((p) => {
        classes[`.${property}-${n}-${p.light}-${p.dark}`] = {
          // Generate the @apply styles
          [`@apply ${property}-${n}-${p.light} dark:${property}-${n}-${p.dark}`]: {}
        };
      });
    });
  });
  return classes;
};
var color_pairings_default = utilColorPairings;

// src/plugin/utilities/typography.ts
var utilTypography = () => {
  return {
    // Typographic Scale
    ".type-scale-1": { "font-size": "var(--type-scale-1)" },
    ".type-scale-2": { "font-size": "var(--type-scale-2)" },
    ".type-scale-3": { "font-size": "var(--type-scale-3)" },
    ".type-scale-4": { "font-size": "var(--type-scale-4)" },
    ".type-scale-5": { "font-size": "var(--type-scale-5)" },
    ".type-scale-6": { "font-size": "var(--type-scale-6)" },
    ".type-scale-7": { "font-size": "var(--type-scale-7)" },
    ".type-scale-8": { "font-size": "var(--type-scale-8)" },
    ".type-scale-9": { "font-size": "var(--type-scale-9)" },
    ".type-scale-10": { "font-size": "var(--type-scale-10)" },
    ".type-scale-11": { "font-size": "var(--type-scale-11)" },
    ".type-scale-12": { "font-size": "var(--type-scale-12)" },
    ".type-scale-13": { "font-size": "var(--type-scale-13)" },
    // Base Font
    ".base-font-color": { color: "rgb(var(--base-font-color))" },
    ".base-font-color-dark": { color: "rgb(var(--base-font-color-dark))" },
    ".base-font-family": { "font-family": "var(--base-font-family)" },
    ".base-font-size": { "font-size": "var(--base-font-size)" },
    ".base-line-height": { "line-height": "var(--base-line-height)" },
    ".base-font-weight": { "font-weight": "var(--base-font-weight)" },
    ".base-font-style": { "font-style": "var(--base-font-style)" },
    ".base-letter-spacing": { "letter-spacing": "var(--base-letter-spacing)" },
    // Header Font
    ".heading-font-color": { color: "rgb(var(--heading-font-color))" },
    ".heading-font-color-dark": { color: "rgb(var(--heading-font-color-dark))" },
    ".heading-font-family": { "font-family": "var(--heading-font-family)" },
    ".heading-font-size": { "font-size": "var(--heading-font-size)" },
    ".heading-line-height": { "line-height": "var(--heading-line-height)" },
    ".heading-font-weight": { "font-weight": "var(--heading-font-weight)" },
    ".heading-font-style": { "font-style": "var(--heading-font-style)" },
    ".heading-letter-spacing": { "letter-spacing": "var(--heading-letter-spacing)" },
    // Anchor Font
    ".anchor-font-color": { color: "rgb(var(--anchor-font-color))" },
    ".anchor-font-color-dark": { color: "rgb(var(--anchor-font-color-dark))" },
    ".anchor-font-family": { "font-family": "var(--anchor-font-family)" },
    ".anchor-font-size": { "font-size": "var(--anchor-font-size)" },
    ".anchor-line-height": { "line-height": "var(--anchor-line-height)" },
    ".anchor-font-weight": { "font-weight": "var(--anchor-font-weight)" },
    ".anchor-font-style": { "font-style": "var(--anchor-font-style)" },
    ".anchor-letter-spacing": { "letter-spacing": "var(--anchor-letter-spacing)" },
    ".anchor-text-decoration": { "text-decoration": "var(--anchor-text-decoration)" },
    ".anchor-text-decoration-active": { "text-decoration": "var(--anchor-text-decoration-active)" },
    ".anchor-text-decoration-focus": { "text-decoration": "var(--anchor-text-decoration-focus)" },
    ".anchor-text-decoration-hover": { "text-decoration": "var(--anchor-text-decoration-hover)" }
  };
};
var typography_default = utilTypography;

// src/plugin/utilities/presets.ts
var utilPresets = () => {
  const classes = {
    // Neutral Presets
    ".preset-filled": { "@apply bg-neutral-950 dark:bg-neutral-50 text-neutral-50 dark:text-neutral-950": {} },
    ".preset-tonal": { "@apply bg-neutral-950/5 dark:bg-neutral-50/5": {} },
    ".preset-outlined": { "@apply ring ring-inset ring-neutral-950 dark:ring-neutral-50": {} }
  };
  settings.colorNames.forEach((n) => {
    classes[`.preset-tonal-${n}`] = {
      [`@apply bg-${n}-50 dark:bg-${n}-950 text-${n}-contrast-50 dark:text-${n}-contrast-950`]: {}
    };
    settings.colorPairings.forEach((p) => {
      classes[`.preset-filled-${n}-500`] = {
        [`@apply bg-${n}-500 text-${n}-contrast-500 dark:text-${n}-contrast-500`]: {}
      };
      classes[`.preset-filled-${n}-${p.light}-${p.dark}`] = {
        [`@apply bg-${n}-${p.light}-${p.dark} text-${n}-contrast-${p.light} dark:text-${n}-contrast-${p.dark}`]: {}
      };
      classes[`.preset-outlined-${n}-500`] = {
        [`@apply ring ring-inset ring-${n}-500`]: {}
      };
      classes[`.preset-outlined-${n}-${p.light}-${p.dark}`] = {
        [`@apply ring ring-inset ring-${n}-${p.light}-${p.dark}`]: {}
      };
    });
  });
  return classes;
};
var presets_default = utilPresets;

// src/plugin/extends/animations.ts
var extendAnimAndKeyframes = () => {
  return {
    animation: {
      "progress-indeterminate": "anim-progress-indeterminate 2s linear infinite",
      "ring-indeterminate": "anim-ring-indeterminate 2s linear infinite"
    },
    keyframes: {
      "anim-progress-indeterminate": {
        from: { transform: "translateX(-200%)" },
        to: { transform: "translateX(200%)" }
      },
      "anim-ring-indeterminate": {
        from: { "stroke-dasharray": "1, 400", "stroke-dashoffset": "0" },
        to: { "stroke-dasharray": "400, 400", "stroke-dashoffset": "-140" }
      }
    }
  };
};
var animations_default = extendAnimAndKeyframes;

// src/plugin/extends/backgrounds.ts
var extendSpacing = () => {
  return {
    backgroundImage: {
      "gradient-radial": "radial-gradient(var(--tw-gradient-stops))",
      "gradient-conic": "conic-gradient(from 180deg at 50% 50%, var(--tw-gradient-stops))"
    }
  };
};
var backgrounds_default = extendSpacing;

// src/plugin/extends/borders.ts
var extendBorders = () => {
  return {
    // https://tailwindcss.com/docs/border-width#arbitrary-values
    borderWidth: {
      DEFAULT: "var(--border-width-default)"
    },
    // https://tailwindcss.com/docs/border-radius#arbitrary-values
    borderRadius: {
      DEFAULT: "var(--radii-default)",
      container: "var(--radii-container)"
    },
    // https://tailwindcss.com/docs/divide-width#arbitrary-values
    divideWidth: {
      DEFAULT: "var(--divide-width-default)"
    },
    // https://tailwindcss.com/docs/outline-width#arbitrary-values
    outlineWidth: {
      DEFAULT: "var(--outline-width-default)"
    },
    // https://tailwindcss.com/docs/ring-width#arbitrary-values
    ringWidth: {
      DEFAULT: "var(--ring-width-default)"
    }
  };
};
var borders_default = extendBorders;

// src/plugin/extends/colors.ts
function generatePaletteRamp(colorName, suffix) {
  const shadeObj = {};
  settings_default.colorShades.forEach((s) => shadeObj[s] = `rgb(var(--color-${colorName}${suffix}-${s}) / <alpha-value>)`);
  return shadeObj;
}
var extendColors = () => {
  const colorPalette = {
    // https://tailwindcss.com/docs/background-color#arbitrary-values
    "body-color": "rgb(var(--body-background-color))",
    "body-color-dark": "rgb(var(--body-background-color-dark))"
  };
  settings_default.colorNames.forEach((colorName) => {
    colorPalette[colorName] = generatePaletteRamp(colorName, "");
    colorPalette[`${colorName}-contrast`] = generatePaletteRamp(colorName, "-contrast");
  });
  return {
    colors: colorPalette
  };
};
var colors_default = extendColors;

// src/plugin/extends/spacing.ts
var extendSpacing2 = () => {
  return {
    spacing: {
      "0.5": "calc(0.125rem * var(--space-scale-factor))",
      // 2px
      "1": "calc(0.25rem * var(--space-scale-factor))",
      // 4px
      "1.5": "calc(0.375rem * var(--space-scale-factor))",
      // 6px
      "2": "calc(0.5rem * var(--space-scale-factor))",
      // 8px
      "2.5": "calc(0.625rem * var(--space-scale-factor))",
      // 10px
      "3": "calc(0.75rem * var(--space-scale-factor))",
      // 12px
      "3.5": "calc(0.875rem * var(--space-scale-factor))",
      // 14px
      "4": "calc(1rem * var(--space-scale-factor))",
      // 16px
      "5": "calc(1.25rem * var(--space-scale-factor))",
      // 20px
      "6": "calc(1.5rem * var(--space-scale-factor))",
      // 24px
      "7": "calc(1.75rem * var(--space-scale-factor))",
      // 28px
      "8": "calc(2rem * var(--space-scale-factor))",
      // 32px
      "9": "calc(2.25rem * var(--space-scale-factor))",
      // 36px
      "10": "calc(2.5rem * var(--space-scale-factor))",
      // 40px
      "11": "calc(2.75rem * var(--space-scale-factor))",
      // 44px
      "12": "calc(3rem * var(--space-scale-factor))",
      // 48px
      "14": "calc(3.5rem * var(--space-scale-factor))",
      // 56px
      "16": "calc(4rem * var(--space-scale-factor))",
      // 64px
      "20": "calc(5rem * var(--space-scale-factor))",
      // 80px
      "24": "calc(6rem * var(--space-scale-factor))",
      // 96px
      "28": "calc(7rem * var(--space-scale-factor))",
      // 112p
      "32": "calc(8rem * var(--space-scale-factor))",
      // 128p
      "36": "calc(9rem * var(--space-scale-factor))",
      // 144p
      "40": "calc(10rem * var(--space-scale-factor))",
      // 160p
      "44": "calc(11rem * var(--space-scale-factor))",
      // 176p
      "48": "calc(12rem * var(--space-scale-factor))",
      // 192p
      "52": "calc(13rem * var(--space-scale-factor))",
      // 208p
      "56": "calc(14rem * var(--space-scale-factor))",
      // 224p
      "60": "calc(15rem * var(--space-scale-factor))",
      // 240p
      "64": "calc(16rem * var(--space-scale-factor))",
      // 256p
      "72": "calc(18rem * var(--space-scale-factor))",
      // 288p
      "80": "calc(20rem * var(--space-scale-factor))",
      // 320p
      "96": "calc(24rem * var(--space-scale-factor))"
      // 384p
    }
  };
};
var spacing_default = extendSpacing2;

// src/plugin/core.ts
var coreUtilities = {
  ...color_pairings_default(),
  ...typography_default(),
  ...presets_default()
};
var coreConfig = {
  theme: {
    extend: {
      ...animations_default(),
      ...backgrounds_default(),
      ...borders_default(),
      ...colors_default(),
      ...spacing_default()
    }
  }
};
function getSkeletonClasses() {
  try {
    const { components, base } = require_generated_classes();
    if (typeof components !== "object" || typeof base !== "object") {
      console.error("Failed to load Skeleton classes");
      process.exitCode = 1;
    }
    return { components, base };
  } catch {
    console.error("generated-classes.cjs hasn't generated yet");
  }
  return { components: void 0, base: void 0 };
}
var corePlugin = (0, import_plugin.default)(({ addUtilities }) => {
  addUtilities(coreUtilities);
}, coreConfig);

// src/plugin/prefixSelector.ts
var import_postcss_selector_parser = __toESM(require("postcss-selector-parser"), 1);
function prefixSelector(prefix, selector, prependNegative = false) {
  if (prefix === "") {
    return selector;
  }
  const ast = (0, import_postcss_selector_parser.default)().astSync(selector);
  ast.walkClasses((classSelector) => {
    const baseClass = classSelector.value;
    if (baseClass === "dark") {
      return;
    }
    const shouldPlaceNegativeBeforePrefix = prependNegative && baseClass.startsWith("-");
    classSelector.value = shouldPlaceNegativeBeforePrefix ? `-${prefix}${baseClass.slice(1)}` : `${prefix}${baseClass}`;
  });
  return ast.toString();
}

// src/plugin/index.ts
var skeleton = import_plugin2.default.withOptions(
  // Plugin Creator
  (options) => {
    return ({ addBase, addComponents, addUtilities }) => {
      const { components, base } = getSkeletonClasses();
      const baseStyles = {};
      let componentStyles = components;
      if (options?.base !== false) {
        addBase(base);
      }
      options?.themes?.forEach((theme) => {
        baseStyles[`:root [data-theme='${theme.name}']`] = theme.properties;
      });
      if (options?.prefix) {
        const prefix = options?.prefix;
        const root = import_postcss_js.default.parse(components);
        root.walkRules((rule) => {
          rule.selector = prefixSelector(prefix, rule.selector);
        });
        componentStyles = import_postcss_js.default.objectify(root);
      }
      addBase(baseStyles);
      addUtilities(coreUtilities);
      addComponents(componentStyles, { respectPrefix: false });
    };
  },
  // Config
  () => {
    return { ...coreConfig };
  }
);
function contentPath(fileURL, framework) {
  const configPath = (0, import_node_url.fileURLToPath)(fileURL);
  const require2 = (0, import_node_module.createRequire)(fileURL);
  const packageEntryPath = require2.resolve(`@skeletonlabs/skeleton-${framework}`, { paths: [configPath] });
  const packagePath = import_node_path.default.resolve(packageEntryPath, "..");
  const glob = import_node_path.default.join(packagePath, fileExtensions[framework]);
  return glob;
}
var fileExtensions = {
  react: "/**/*.{html,js,ts,jsx,tsx}",
  svelte: "/**/*.{html,js,ts,svelte}"
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  contentPath,
  skeleton
});
//# sourceMappingURL=index.cjs.map